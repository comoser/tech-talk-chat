{"ast":null,"code":"var _jsxFileName = \"/app/client/components/chat/chat_box.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport socketio from 'socket.io-client';\nimport uuidLib from 'uuid/v1';\nimport styled from 'styled-components';\nimport useChatMessages from '../../hooks/chat_messages';\nimport { ChatItem } from './chat_item';\nimport { ChatInput } from './chat_input';\nconst ChatBoxWrapper = styled.div`\n    position: fixed;\n    width: 375px;\n    height: 60vh;\n    border-radius: 5px;\n    background-color: #f0f0f0;\n    top: 100px;\n    left: 50%;\n    transform: translate(-50%, 0);\n    padding: 3px;\n`;\nconst Scroller = styled.div`\n  overflow: scroll;\n  height: calc(100% - 40px);\n`;\nexport const ChatBox = () => {\n  let scrollerRef = null;\n  const {\n    0: uuid,\n    1: setUuid\n  } = useState(null);\n  const {\n    0: socket,\n    1: setSocket\n  } = useState(null);\n  const {\n    0: draftMessage,\n    1: setDraftMessage\n  } = useState('');\n  const [messages, addMessage] = useChatMessages([]);\n  const {\n    0: messageHistory,\n    1: setMessageHistory\n  } = useState([]);\n\n  const fetchHistory = async () => {\n    const response = await fetch(`${process.env.API_URL}/history`);\n    const messagesJson = await response.json();\n    setMessageHistory(messagesJson.response);\n  };\n\n  useEffect(() => {\n    setSocket(socketio.connect(process.env.API_URL));\n    setUuid(uuidLib());\n    fetchHistory();\n  }, []);\n\n  if (socket) {\n    socket.on('CHAT_MESSAGE_RECEIVED', chatMessageContent => {\n      addMessage(chatMessageContent);\n    });\n  }\n\n  const onDraftMessageChange = e => {\n    setDraftMessage(e.target.value);\n  };\n\n  const sendMessage = () => {\n    socket.emit('CHAT_MESSAGE_SENT', {\n      uuid,\n      message: draftMessage\n    });\n    if (scrollerRef) scrollerRef.scrollTop = scrollerRef.scrollHeight;\n  };\n\n  const sendMessageByKeyboard = e => {\n    if (e.which === 13) {\n      socket.emit('CHAT_MESSAGE_SENT', {\n        uuid,\n        message: draftMessage\n      });\n      if (scrollerRef) scrollerRef.scrollTop = scrollerRef.scrollHeight;\n    }\n  };\n\n  const renderHistoryMessages = () => {\n    return messageHistory.map(messageWrapper => {\n      return __jsx(ChatItem, {\n        key: messageWrapper.message,\n        uuid: uuid,\n        messageWrapper: messageWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      });\n    });\n  };\n\n  const renderMessages = () => {\n    return messages.map(messageWrapper => {\n      return __jsx(ChatItem, {\n        key: messageWrapper.message,\n        uuid: uuid,\n        messageWrapper: messageWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      });\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ChatBoxWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(Scroller, {\n    ref: ref => scrollerRef = ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, renderHistoryMessages(), renderMessages()), __jsx(ChatInput, {\n    draftMessage: draftMessage,\n    onDraftMessageChange: onDraftMessageChange,\n    sendMessage: sendMessage,\n    sendMessageByKeyboard: sendMessageByKeyboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/app/client/components/chat/chat_box.js"],"names":["React","useState","useEffect","socketio","uuidLib","styled","useChatMessages","ChatItem","ChatInput","ChatBoxWrapper","div","Scroller","ChatBox","scrollerRef","uuid","setUuid","socket","setSocket","draftMessage","setDraftMessage","messages","addMessage","messageHistory","setMessageHistory","fetchHistory","response","fetch","process","env","API_URL","messagesJson","json","connect","on","chatMessageContent","onDraftMessageChange","e","target","value","sendMessage","emit","message","scrollTop","scrollHeight","sendMessageByKeyboard","which","renderHistoryMessages","map","messageWrapper","renderMessages","ref"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport socketio from 'socket.io-client';\nimport uuidLib from 'uuid/v1';\nimport styled from 'styled-components';\n\nimport useChatMessages from '../../hooks/chat_messages';\nimport { ChatItem } from './chat_item';\nimport { ChatInput } from './chat_input';\n\nconst ChatBoxWrapper = styled.div`\n    position: fixed;\n    width: 375px;\n    height: 60vh;\n    border-radius: 5px;\n    background-color: #f0f0f0;\n    top: 100px;\n    left: 50%;\n    transform: translate(-50%, 0);\n    padding: 3px;\n`;\n\nconst Scroller = styled.div`\n  overflow: scroll;\n  height: calc(100% - 40px);\n`;\n\nexport const ChatBox = () => {\n    let scrollerRef = null;\n    const [uuid, setUuid] = useState(null);\n    const [socket, setSocket] = useState(null);\n    const [draftMessage, setDraftMessage] = useState('');\n    const [messages, addMessage] = useChatMessages([]);\n    const [messageHistory, setMessageHistory] = useState([]);\n\n    const fetchHistory = async () => {\n        const response = await fetch(`${process.env.API_URL}/history`);\n        const messagesJson = await response.json();\n        setMessageHistory(messagesJson.response);\n    };\n\n    useEffect(() => {\n        setSocket(socketio.connect(process.env.API_URL));\n        setUuid(uuidLib());\n        fetchHistory();\n    }, []);\n\n    if (socket) {\n        socket.on('CHAT_MESSAGE_RECEIVED', (chatMessageContent) => {\n            addMessage(chatMessageContent);\n        });\n    }\n\n    const onDraftMessageChange = (e) => {\n        setDraftMessage(e.target.value);\n    };\n\n    const sendMessage = () => {\n        socket.emit('CHAT_MESSAGE_SENT', {\n            uuid,\n            message: draftMessage,\n        });\n        if (scrollerRef) scrollerRef.scrollTop = scrollerRef.scrollHeight;\n    };\n\n    const sendMessageByKeyboard = (e) => {\n        if (e.which === 13) {\n            socket.emit('CHAT_MESSAGE_SENT', {\n                uuid,\n                message: draftMessage,\n            });\n            if (scrollerRef) scrollerRef.scrollTop = scrollerRef.scrollHeight;\n        }\n    };\n\n    const renderHistoryMessages = () => {\n        return messageHistory.map((messageWrapper) => {\n            return (\n                <ChatItem\n                    key={messageWrapper.message}\n                    uuid={uuid}\n                    messageWrapper={messageWrapper}\n                />\n            );\n        });\n    };\n\n    const renderMessages = () => {\n        return messages.map((messageWrapper) => {\n            return (\n                <ChatItem\n                    key={messageWrapper.message}\n                    uuid={uuid}\n                    messageWrapper={messageWrapper}\n                />\n            );\n        });\n    };\n\n    return (\n        <>\n            <ChatBoxWrapper>\n                <Scroller ref={ref => scrollerRef = ref}>\n                    {renderHistoryMessages()}\n                    {renderMessages()}\n                </Scroller>\n                <ChatInput\n                    draftMessage={draftMessage}\n                    onDraftMessageChange={onDraftMessageChange}\n                    sendMessage={sendMessage}\n                    sendMessageByKeyboard={sendMessageByKeyboard}\n                />\n            </ChatBoxWrapper>\n        </>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}