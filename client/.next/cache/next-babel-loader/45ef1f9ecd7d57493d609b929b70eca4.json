{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/app/client/components/chat/chat_box.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  overflow: scroll;\\n  height: calc(100% - 40px);\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    position: fixed;\\n    width: 375px;\\n    height: 60vh;\\n    border-radius: 5px;\\n    border: 1px solid #a3a3a3;\\n    top: 100px;\\n    left: 50%;\\n    transform: translate(-50%, 0);\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport socketio from 'socket.io-client';\nimport uuidLib from 'uuid/v1';\nimport styled from 'styled-components';\nimport useChatMessages from '../../hooks/chat_messages';\nimport { ChatItem } from './chat_item';\nimport { ChatInput } from './chat_input';\nvar ChatBoxWrapper = styled.div(_templateObject());\nvar Scroller = styled.div(_templateObject2());\nexport var ChatBox = function ChatBox() {\n  var scrollerRef = null;\n\n  var _useState = useState(null),\n      uuid = _useState[0],\n      setUuid = _useState[1];\n\n  var _useState2 = useState(null),\n      socket = _useState2[0],\n      setSocket = _useState2[1];\n\n  var _useState3 = useState(''),\n      draftMessage = _useState3[0],\n      setDraftMessage = _useState3[1];\n\n  var _useChatMessages = useChatMessages([]),\n      _useChatMessages2 = _slicedToArray(_useChatMessages, 2),\n      messages = _useChatMessages2[0],\n      addMessage = _useChatMessages2[1];\n\n  var _useState4 = useState([]),\n      messageHistory = _useState4[0],\n      setMessageHistory = _useState4[1];\n\n  var fetchHistory =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, messagesJson;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"\".concat(process.env.API_URL, \"/history\"));\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              messagesJson = _context.sent;\n              setMessageHistory(messagesJson.response);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchHistory() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    setSocket(socketio.connect(process.env.API_URL));\n    setUuid(uuidLib());\n    fetchHistory();\n  }, []);\n  useEffect(function () {\n    if (scrollerRef) scrollerRef.scrollTop = scrollerRef.scrollHeight;\n  });\n\n  if (socket) {\n    socket.on('CHAT_MESSAGE_RECEIVED', function (chatMessageContent) {\n      addMessage(chatMessageContent);\n    });\n  }\n\n  var onDraftMessageChange = function onDraftMessageChange(e) {\n    setDraftMessage(e.target.value);\n  };\n\n  var sendMessage = function sendMessage() {\n    socket.emit('CHAT_MESSAGE_SENT', {\n      uuid: uuid,\n      message: draftMessage\n    });\n\n    if (scrollerRef) {\n      scrollerRef.scrollTop = scrollerRef.scrollHeight;\n      setDraftMessage('');\n    }\n  };\n\n  var sendMessageByKeyboard = function sendMessageByKeyboard(e) {\n    if (e.which === 13) {\n      socket.emit('CHAT_MESSAGE_SENT', {\n        uuid: uuid,\n        message: draftMessage\n      });\n\n      if (scrollerRef) {\n        scrollerRef.scrollTop = scrollerRef.scrollHeight;\n        setDraftMessage('');\n      }\n    }\n  };\n\n  var renderHistoryMessages = function renderHistoryMessages() {\n    return messageHistory.map(function (messageWrapper, index) {\n      return __jsx(ChatItem, {\n        key: String(index),\n        uuid: uuid,\n        messageWrapper: messageWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      });\n    });\n  };\n\n  var renderMessages = function renderMessages() {\n    return messages.map(function (messageWrapper) {\n      return __jsx(ChatItem, {\n        key: String(index),\n        uuid: uuid,\n        messageWrapper: messageWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      });\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ChatBoxWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, __jsx(Scroller, {\n    ref: function ref(_ref2) {\n      return scrollerRef = _ref2;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, renderHistoryMessages(), renderMessages()), __jsx(ChatInput, {\n    draftMessage: draftMessage,\n    onDraftMessageChange: onDraftMessageChange,\n    sendMessage: sendMessage,\n    sendMessageByKeyboard: sendMessageByKeyboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/app/client/components/chat/chat_box.js"],"names":["React","useState","useEffect","socketio","uuidLib","styled","useChatMessages","ChatItem","ChatInput","ChatBoxWrapper","div","Scroller","ChatBox","scrollerRef","uuid","setUuid","socket","setSocket","draftMessage","setDraftMessage","messages","addMessage","messageHistory","setMessageHistory","fetchHistory","fetch","process","env","API_URL","response","json","messagesJson","connect","scrollTop","scrollHeight","on","chatMessageContent","onDraftMessageChange","e","target","value","sendMessage","emit","message","sendMessageByKeyboard","which","renderHistoryMessages","map","messageWrapper","index","String","renderMessages","ref"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,IAAMC,cAAc,GAAGJ,MAAM,CAACK,GAAV,mBAApB;AAWA,IAAMC,QAAQ,GAAGN,MAAM,CAACK,GAAV,oBAAd;AAKA,OAAO,IAAME,OAAO,GAAG,SAAVA,OAAU,GAAM;AACzB,MAAIC,WAAW,GAAG,IAAlB;;AADyB,kBAEDZ,QAAQ,CAAC,IAAD,CAFP;AAAA,MAElBa,IAFkB;AAAA,MAEZC,OAFY;;AAAA,mBAGGd,QAAQ,CAAC,IAAD,CAHX;AAAA,MAGlBe,MAHkB;AAAA,MAGVC,SAHU;;AAAA,mBAIehB,QAAQ,CAAC,EAAD,CAJvB;AAAA,MAIlBiB,YAJkB;AAAA,MAIJC,eAJI;;AAAA,yBAKMb,eAAe,CAAC,EAAD,CALrB;AAAA;AAAA,MAKlBc,QALkB;AAAA,MAKRC,UALQ;;AAAA,mBAMmBpB,QAAQ,CAAC,EAAD,CAN3B;AAAA,MAMlBqB,cANkB;AAAA,MAMFC,iBANE;;AAQzB,MAAMC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACMC,KAAK,WAAIC,OAAO,CAACC,GAAR,CAAYC,OAAhB,cADX;;AAAA;AACXC,cAAAA,QADW;AAAA;AAAA,qBAEUA,QAAQ,CAACC,IAAT,EAFV;;AAAA;AAEXC,cAAAA,YAFW;AAGjBR,cAAAA,iBAAiB,CAACQ,YAAY,CAACF,QAAd,CAAjB;;AAHiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZL,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAMAtB,EAAAA,SAAS,CAAC,YAAM;AACZe,IAAAA,SAAS,CAACd,QAAQ,CAAC6B,OAAT,CAAiBN,OAAO,CAACC,GAAR,CAAYC,OAA7B,CAAD,CAAT;AACAb,IAAAA,OAAO,CAACX,OAAO,EAAR,CAAP;AACAoB,IAAAA,YAAY;AACf,GAJQ,EAIN,EAJM,CAAT;AAMAtB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIW,WAAJ,EAAiBA,WAAW,CAACoB,SAAZ,GAAwBpB,WAAW,CAACqB,YAApC;AACpB,GAFQ,CAAT;;AAIA,MAAIlB,MAAJ,EAAY;AACRA,IAAAA,MAAM,CAACmB,EAAP,CAAU,uBAAV,EAAmC,UAACC,kBAAD,EAAwB;AACvDf,MAAAA,UAAU,CAACe,kBAAD,CAAV;AACH,KAFD;AAGH;;AAED,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,CAAD,EAAO;AAChCnB,IAAAA,eAAe,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AACH,GAFD;;AAIA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtBzB,IAAAA,MAAM,CAAC0B,IAAP,CAAY,mBAAZ,EAAiC;AAC7B5B,MAAAA,IAAI,EAAJA,IAD6B;AAE7B6B,MAAAA,OAAO,EAAEzB;AAFoB,KAAjC;;AAIA,QAAIL,WAAJ,EAAiB;AACbA,MAAAA,WAAW,CAACoB,SAAZ,GAAwBpB,WAAW,CAACqB,YAApC;AACAf,MAAAA,eAAe,CAAC,EAAD,CAAf;AACH;AACJ,GATD;;AAWA,MAAMyB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACN,CAAD,EAAO;AACjC,QAAIA,CAAC,CAACO,KAAF,KAAY,EAAhB,EAAoB;AAChB7B,MAAAA,MAAM,CAAC0B,IAAP,CAAY,mBAAZ,EAAiC;AAC7B5B,QAAAA,IAAI,EAAJA,IAD6B;AAE7B6B,QAAAA,OAAO,EAAEzB;AAFoB,OAAjC;;AAIA,UAAIL,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAACoB,SAAZ,GAAwBpB,WAAW,CAACqB,YAApC;AACAf,QAAAA,eAAe,CAAC,EAAD,CAAf;AACH;AACJ;AACJ,GAXD;;AAaA,MAAM2B,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAChC,WAAOxB,cAAc,CAACyB,GAAf,CAAmB,UAACC,cAAD,EAAiBC,KAAjB,EAA2B;AACjD,aACI,MAAC,QAAD;AACI,QAAA,GAAG,EAAEC,MAAM,CAACD,KAAD,CADf;AAEI,QAAA,IAAI,EAAEnC,IAFV;AAGI,QAAA,cAAc,EAAEkC,cAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAOH,KARM,CAAP;AASH,GAVD;;AAYA,MAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,WAAO/B,QAAQ,CAAC2B,GAAT,CAAa,UAACC,cAAD,EAAoB;AACpC,aACI,MAAC,QAAD;AACI,QAAA,GAAG,EAAEE,MAAM,CAACD,KAAD,CADf;AAEI,QAAA,IAAI,EAAEnC,IAFV;AAGI,QAAA,cAAc,EAAEkC,cAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAOH,KARM,CAAP;AASH,GAVD;;AAYA,SACI,4BACI,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,QAAD;AAAU,IAAA,GAAG,EAAE,aAAAI,KAAG;AAAA,aAAIvC,WAAW,GAAGuC,KAAlB;AAAA,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKN,qBAAqB,EAD1B,EAEKK,cAAc,EAFnB,CADJ,EAKI,MAAC,SAAD;AACI,IAAA,YAAY,EAAEjC,YADlB;AAEI,IAAA,oBAAoB,EAAEmB,oBAF1B;AAGI,IAAA,WAAW,EAAEI,WAHjB;AAII,IAAA,qBAAqB,EAAEG,qBAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ,CADJ;AAgBH,CAlGM","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport socketio from 'socket.io-client';\nimport uuidLib from 'uuid/v1';\nimport styled from 'styled-components';\n\nimport useChatMessages from '../../hooks/chat_messages';\nimport { ChatItem } from './chat_item';\nimport { ChatInput } from './chat_input';\n\nconst ChatBoxWrapper = styled.div`\n    position: fixed;\n    width: 375px;\n    height: 60vh;\n    border-radius: 5px;\n    border: 1px solid #a3a3a3;\n    top: 100px;\n    left: 50%;\n    transform: translate(-50%, 0);\n`;\n\nconst Scroller = styled.div`\n  overflow: scroll;\n  height: calc(100% - 40px);\n`;\n\nexport const ChatBox = () => {\n    let scrollerRef = null;\n    const [uuid, setUuid] = useState(null);\n    const [socket, setSocket] = useState(null);\n    const [draftMessage, setDraftMessage] = useState('');\n    const [messages, addMessage] = useChatMessages([]);\n    const [messageHistory, setMessageHistory] = useState([]);\n\n    const fetchHistory = async () => {\n        const response = await fetch(`${process.env.API_URL}/history`);\n        const messagesJson = await response.json();\n        setMessageHistory(messagesJson.response);\n    };\n\n    useEffect(() => {\n        setSocket(socketio.connect(process.env.API_URL));\n        setUuid(uuidLib());\n        fetchHistory();\n    }, []);\n\n    useEffect(() => {\n        if (scrollerRef) scrollerRef.scrollTop = scrollerRef.scrollHeight;\n    });\n\n    if (socket) {\n        socket.on('CHAT_MESSAGE_RECEIVED', (chatMessageContent) => {\n            addMessage(chatMessageContent);\n        });\n    }\n\n    const onDraftMessageChange = (e) => {\n        setDraftMessage(e.target.value);\n    };\n\n    const sendMessage = () => {\n        socket.emit('CHAT_MESSAGE_SENT', {\n            uuid,\n            message: draftMessage,\n        });\n        if (scrollerRef) {\n            scrollerRef.scrollTop = scrollerRef.scrollHeight;\n            setDraftMessage('');\n        }\n    };\n\n    const sendMessageByKeyboard = (e) => {\n        if (e.which === 13) {\n            socket.emit('CHAT_MESSAGE_SENT', {\n                uuid,\n                message: draftMessage,\n            });\n            if (scrollerRef) {\n                scrollerRef.scrollTop = scrollerRef.scrollHeight;\n                setDraftMessage('');\n            }\n        }\n    };\n\n    const renderHistoryMessages = () => {\n        return messageHistory.map((messageWrapper, index) => {\n            return (\n                <ChatItem\n                    key={String(index)}\n                    uuid={uuid}\n                    messageWrapper={messageWrapper}\n                />\n            );\n        });\n    };\n\n    const renderMessages = () => {\n        return messages.map((messageWrapper) => {\n            return (\n                <ChatItem\n                    key={String(index)}\n                    uuid={uuid}\n                    messageWrapper={messageWrapper}\n                />\n            );\n        });\n    };\n\n    return (\n        <>\n            <ChatBoxWrapper>\n                <Scroller ref={ref => scrollerRef = ref}>\n                    {renderHistoryMessages()}\n                    {renderMessages()}\n                </Scroller>\n                <ChatInput\n                    draftMessage={draftMessage}\n                    onDraftMessageChange={onDraftMessageChange}\n                    sendMessage={sendMessage}\n                    sendMessageByKeyboard={sendMessageByKeyboard}\n                />\n            </ChatBoxWrapper>\n        </>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}