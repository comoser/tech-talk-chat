{"ast":null,"code":"var _jsxFileName = \"/Users/davidalecrim/Desktop/tech-talk/client/components/chat/chat_box.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport socketio from 'socket.io-client';\nimport uuidLib from 'uuid/v1';\nexport const ChatBox = () => {\n  const {\n    0: uuid,\n    1: setUuid\n  } = useState(null);\n  const {\n    0: socket,\n    1: setSocket\n  } = useState(null);\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  useEffect(() => {\n    const socket = socketio.connect('http://localhost:8007');\n    const uuidValue = uuidLib();\n    setSocket(socket);\n    setUuid(uuidValue);\n    socket.on('CHAT_MESSAGE_RECEIVED', chatMessageContent => {\n      console.log(chatMessageContent);\n      setMessages([...messages, chatMessageContent.message]);\n      console.log(chatMessageContent.uuid, uuidValue);\n\n      if (chatMessageContent.uuid === uuidValue) {\n        console.log('IT WAS ME');\n      } else {\n        console.log('NOT ME');\n      }\n    });\n  }, []);\n  useEffect(() => {\n    console.log(messages);\n  });\n\n  const onMessageChange = e => {\n    setMessage(e.target.value);\n  };\n\n  const sendMessage = () => {\n    socket.emit('CHAT_MESSAGE_SENT', {\n      uuid,\n      message\n    });\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: \"chat-message\",\n    value: message,\n    onChange: onMessageChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    onClick: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Send Message\"));\n};\nChatBox.propTypes = {};\nChatBox.defaultProps = {};","map":{"version":3,"sources":["/Users/davidalecrim/Desktop/tech-talk/client/components/chat/chat_box.js"],"names":["React","useState","useEffect","PropTypes","styled","socketio","uuidLib","ChatBox","uuid","setUuid","socket","setSocket","message","setMessage","messages","setMessages","connect","uuidValue","on","chatMessageContent","console","log","onMessageChange","e","target","value","sendMessage","emit","propTypes","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM;AAAA,OAACS,MAAD;AAAA,OAASC;AAAT,MAAsBV,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM;AAAA,OAACW,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACa,QAAD;AAAA,OAAWC;AAAX,MAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,MAAM,GAAGL,QAAQ,CAACW,OAAT,CAAiB,uBAAjB,CAAf;AACA,UAAMC,SAAS,GAAGX,OAAO,EAAzB;AACAK,IAAAA,SAAS,CAACD,MAAD,CAAT;AACAD,IAAAA,OAAO,CAACQ,SAAD,CAAP;AACAP,IAAAA,MAAM,CAACQ,EAAP,CAAU,uBAAV,EAAoCC,kBAAD,IAAwB;AACvDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,kBAAZ;AACAJ,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcK,kBAAkB,CAACP,OAAjC,CAAD,CAAX;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYF,kBAAkB,CAACX,IAA/B,EAAqCS,SAArC;;AACA,UAAIE,kBAAkB,CAACX,IAAnB,KAA4BS,SAAhC,EAA2C;AACvCG,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH,OAFD,MAEO;AACHD,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;AACJ,KATD;AAUH,GAfQ,EAeN,EAfM,CAAT;AAiBAnB,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACH,GAFQ,CAAT;;AAIA,QAAMQ,eAAe,GAAIC,CAAD,IAAO;AAC3BV,IAAAA,UAAU,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACtBhB,IAAAA,MAAM,CAACiB,IAAP,CAAY,mBAAZ,EAAiC;AAC7BnB,MAAAA,IAD6B;AAE7BI,MAAAA;AAF6B,KAAjC;AAIH,GALD;;AAOA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,IAAI,EAAC,cADT;AAEI,IAAA,KAAK,EAAEA,OAFX;AAGI,IAAA,QAAQ,EAAEU,eAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAMI;AAAQ,IAAA,OAAO,EAAEI,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ,CADJ;AAYH,CAlDM;AAoDPnB,OAAO,CAACqB,SAAR,GAAoB,EAApB;AAIArB,OAAO,CAACsB,YAAR,GAAuB,EAAvB","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport socketio from 'socket.io-client';\nimport uuidLib from 'uuid/v1';\n\nexport const ChatBox = () => {\n    const [uuid, setUuid] = useState(null);\n    const [socket, setSocket] = useState(null);\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n\n    useEffect(() => {\n        const socket = socketio.connect('http://localhost:8007');\n        const uuidValue = uuidLib();\n        setSocket(socket);\n        setUuid(uuidValue);\n        socket.on('CHAT_MESSAGE_RECEIVED', (chatMessageContent) => {\n            console.log(chatMessageContent);\n            setMessages([...messages, chatMessageContent.message]);\n            console.log(chatMessageContent.uuid, uuidValue);\n            if (chatMessageContent.uuid === uuidValue) {\n                console.log('IT WAS ME');\n            } else {\n                console.log('NOT ME');\n            }\n        });\n    }, []);\n\n    useEffect(() => {\n        console.log(messages);\n    });\n\n    const onMessageChange = (e) => {\n        setMessage(e.target.value);\n    };\n\n    const sendMessage = () => {\n        socket.emit('CHAT_MESSAGE_SENT', {\n            uuid,\n            message,\n        });\n    }\n\n    return (\n        <div>\n            <input\n                name=\"chat-message\"\n                value={message}\n                onChange={onMessageChange}\n            />\n            <button onClick={sendMessage}>\n                Send Message\n            </button>\n        </div>\n    );\n};\n\nChatBox.propTypes = {\n\n};\n\nChatBox.defaultProps = {\n\n};\n"]},"metadata":{},"sourceType":"module"}