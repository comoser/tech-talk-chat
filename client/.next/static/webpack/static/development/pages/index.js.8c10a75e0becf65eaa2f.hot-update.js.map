{"version":3,"file":"static/webpack/static/development/pages/index.js.8c10a75e0becf65eaa2f.hot-update.js","sources":["webpack:///./components/chat/chat_box.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport socketio from 'socket.io-client';\nimport uuidLib from 'uuid/v1';\n\nimport useChatMessages from '../../hooks/chat_messages';\n\nexport const ChatBox = () => {\n    const [uuid, setUuid] = useState(null);\n    const [socket, setSocket] = useState(null);\n    const [draftMessage, setDraftMessage] = useState('');\n    const [messages, addMessage] = useChatMessages([]);\n    const [messageHistory, setMessageHistory] = useState([]);\n\n    useEffect(async () => {\n        setSocket(socketio.connect(process.env.API_URL));\n        setUuid(uuidLib());\n        const response = await fetch(`${process.env.API_URL}/history`);\n        const messagesJson = await response.json();\n        setMessageHistory(messagesJson.response);\n    }, []);\n\n    if (socket) {\n        socket.on('CHAT_MESSAGE_RECEIVED', (chatMessageContent) => {\n            addMessage(chatMessageContent);\n        });\n    }\n\n    const onDraftMessageChange = (e) => {\n        setDraftMessage(e.target.value);\n    };\n\n    const sendMessage = () => {\n        socket.emit('CHAT_MESSAGE_SENT', {\n            uuid,\n            message: draftMessage,\n        });\n    }\n\n    const sendMessageByKeyboard = (e) => {\n        if (e.which === 13) {\n            socket.emit('CHAT_MESSAGE_SENT', {\n                uuid,\n                message: draftMessage,\n            });\n        }\n    }\n\n    return (\n        <div>\n            <ul>\n                {\n                    messageHistory.map((item) => {\n                        return (\n                            <li\n                                key={item.message}\n                            >\n                                {item.uuid === uuid ? 'ME: ':''}{item.message}\n                            </li>\n                        );\n                    })\n                }\n                {\n                    messages.map((messageWrapper) => {\n                        return (\n                            <li\n                                key={messageWrapper.message}\n                            >\n                                {messageWrapper.uuid === uuid ? 'ME: ' : ''}{messageWrapper.message}\n                            </li>\n                        );\n                    })\n                }\n            </ul>\n            <input\n                name=\"draft-message\"\n                value={draftMessage}\n                onChange={onDraftMessageChange}\n                onKeyPress={sendMessageByKeyboard}\n            />\n            <button onClick={sendMessage}>\n                Send Message\n            </button>\n        </div>\n    );\n};\n\nChatBox.propTypes = {\n\n};\n\nChatBox.defaultProps = {\n\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAIA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAIA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAIA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AAIA;;;;A","sourceRoot":""}